name: Download metrics

on:
  schedule:
    - cron: "15 0 * * *"  # zilnic, 00:15 UTC
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  downloads:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Compute download metrics
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const repo = context.repo;

            // 1) Preia toate release-urile (paginat)
            let releases = await github.paginate(
              github.rest.repos.listReleases,
              { owner: repo.owner, repo: repo.repo, per_page: 100 }
            );

            // Exclude drafts. (Păstrăm prerelease-urile în calcul; schimbă aici dacă vrei alt comportament.)
            releases = releases.filter(r => !r.draft);

            // 2) Calculează totalurile
            let total = 0;
            const perRelease = [];
            const perAsset = [];

            for (const r of releases) {
              let relTotal = 0;
              for (const a of (r.assets || [])) {
                const cnt = a.download_count || 0;
                relTotal += cnt;
                perAsset.push({
                  tag: r.tag_name,
                  name: a.name,
                  download_count: cnt,
                  browser_download_url: a.browser_download_url
                });
              }
              total += relTotal;
              perRelease.push({
                tag: r.tag_name,
                name: r.name,
                prerelease: r.prerelease,
                published_at: r.published_at,
                downloads: relTotal,
                assets: (r.assets || []).map(a => ({
                  name: a.name,
                  download_count: a.download_count || 0
                }))
              });
            }

            // 3) Scrie fișierele
            const now = new Date().toISOString();

            const metricsDir = path.join(process.cwd(), 'metrics');
            if (!fs.existsSync(metricsDir)) fs.mkdirSync(metricsDir, { recursive: true });

            // 3a) Istoric (append ca JSONL)
            const historyPath = path.join(metricsDir, 'downloads.history.jsonl');
            const snapshot = { timestamp: now, total_downloads: total, per_release: perRelease };
            fs.appendFileSync(historyPath, JSON.stringify(snapshot) + '\n');

            // 3b) Snapshot curent detaliat
            const latestPath = path.join(metricsDir, 'downloads.json');
            fs.writeFileSync(latestPath, JSON.stringify({
              generated_at: now,
              repository: `${repo.owner}/${repo.repo}`,
              total_downloads: total,
              per_release: perRelease,
              per_asset: perAsset
            }, null, 2));

            // 3c) Endpoint pentru Shields.io
            const shieldsDir = path.join(metricsDir, 'shields');
            if (!fs.existsSync(shieldsDir)) fs.mkdirSync(shieldsDir, { recursive: true });

            const pretty = new Intl.NumberFormat('en-US').format(total);
            const shields = {
              schemaVersion: 1,
              label: "downloads (assets)",
              message: pretty,
              color: "blue"
            };
            fs.writeFileSync(path.join(shieldsDir, 'downloads.json'), JSON.stringify(shields));

      - name: Commit files
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(metrics): update downloads snapshot"
          file_pattern: |
            metrics/downloads.json
            metrics/downloads.history.jsonl
            metrics/shields/downloads.json
